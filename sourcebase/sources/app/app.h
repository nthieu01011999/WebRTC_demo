#ifndef __APP_H__
#define __APP_H__

#include <string>

#include "app_config.h"
#include "cpptime.h"

using namespace std;

#define MTCE_SERIAL_NUM_DEFAULT		"24010000004"


/*****************************************************************************/
/* task GW_AV define
 */
/*****************************************************************************/
/* define timer */
#define GW_AV_CHECK_CAPTURE_PROCESS_TIMEOUT_INTERVAL (10000)
#define GW_AV_AUTO_CONTROL_DAYNIGHT_TIMEOUT_INTERVAL (5000)
#define GW_AV_VIDEO_SET_ENCODE_TIMEOUT_INTERVAL		 (5000)
#define GW_AV_OSD_UPDATE_TIME_TEXT_TIMEOUT_INTERVAL	 (1000)

/* define signal */

enum {
	GW_AV_WATCHDOG_PING_REQ = AK_USER_WATCHDOG_SIG,
	GW_AV_INIT_REQ			= AK_USER_DEFINE_SIG,
	GW_AV_SET_CAMERAPARAM_REQ,
	GW_AV_GET_CAMERAPARAM_REQ,
	GW_AV_SET_ENCODE_REQ,
	GW_AV_SET_ENCODE_REQ_TO,
	GW_AV_APPLY_NEW_ENCODE_REQ,
	GW_AV_GET_ENCODE_REQ,
	GW_AV_SET_WATERMARK_REQ,
	GW_AV_GET_WATERMARK_REQ,
	GW_AV_CHECK_CAPTURE_RUNNING_REQ,
	GW_AV_CHECK_VIDEO_STREAM_RUNNING_REQ,
	GW_AV_RELOAD_PICTURE_REQ,
	GW_AV_SET_ENCODE_STOP_VIDEO_MAIN_STREAM_RES,
	GW_AV_SET_ENCODE_STOP_VIDEO_SUB_STREAM_RES,
	GW_AV_SET_ENCODE_STOP_RTC_AUDIO_STREAM_RES,
	GW_AV_SET_ENCODE_STOP_RTMP_AUDIO_STREAM_RES,
};

/*****************************************************************************/
/*  task GW_TASK_WEBRTC define
 */
/*****************************************************************************/
/* define timer */
#define GW_WEBRTC_ERASE_CLIENT_NO_ANSWER_TIMEOUT_INTERVAL (40000) /* 40s */
#define GW_WEBRTC_TRY_CONNECT_SOCKET_INTERVAL			  (10000) /* 10s */
#define GW_WEBRTC_WAIT_REQUEST_TIMEOUT_INTERVAL			  (20000) /* 20s */
#define GW_WEBRTC_RELEASE_CLIENT_PUSH_TO_TALK_INTERVAL	  (2500)  /* 2.5s */

/* define signal */
enum {
	GW_WEBRTC_WATCHDOG_PING_REQ	 = AK_USER_WATCHDOG_SIG,
	GW_WEBRTC_SIGNALING_MQTT_REQ = AK_USER_DEFINE_SIG,
#ifdef TEST_USE_WEB_SOCKET
	GW_WEBRTC_TRY_CONNECT_SOCKET_REQ,
	GW_WEBRTC_SIGNALING_SOCKET_REQ,
#endif
	GW_WEBRTC_SET_STUN_SERVER_REQ,
	GW_WEBRTC_GET_STUN_SERVER_REQ,
	GW_WEBRTC_SET_TURN_SERVER_REQ,
	GW_WEBRTC_GET_TURN_SERVER_REQ,
	GW_WEBRTC_CHECK_CLIENT_CONNECTED_REQ,
	GW_WEBRTC_ERASE_CLIENT_REQ,
	GW_WEBRTC_DBG_IPC_SEND_MESSAGE_REQ,
	GW_WEBRTC_ON_MESSAGE_CONTROL_DATACHANNEL_REQ,
	GW_WEBRTC_DATACHANNEL_DOWNLOAD_RELEASE_REQ,
	GW_WEBRTC_RELEASE_CLIENT_PUSH_TO_TALK,

	GW_HELLO_PRINT,
	GW_WEBRTC_ICE_CANDIDATE,
};

/*****************************************************************************/
/*  task GW_CLOUD define
 */
/*****************************************************************************/
/* define timer */
#define GW_WEB_MQTT_TRY_CONNECT_TIMEOUT_INTERVAL		  (5000)
#define GW_WEB_MQTT_CHECK_CONNECT_STATUS_INTERVAL		  (10000)
#define GW_WEB_MQTT_TRY_CONNECT_AFTER_DISCONNECT_INTERVAL (20000)

/* define signal */
enum {
	GW_CLOUD_WATCHDOG_PING_REQ = AK_USER_WATCHDOG_SIG,
	GW_CLOUD_MQTT_INIT_REQ	   = AK_USER_DEFINE_SIG,
	GW_CLOUD_MQTT_TRY_CONNECT_REQ,
	GW_CLOUD_MQTT_CHECK_CONNECT_STATUS_REQ,
	GW_CLOUD_DATA_COMMUNICATION,
	GW_CLOUD_SET_MQTT_CONFIG_REQ,
	GW_CLOUD_GET_MQTT_CONFIG_REQ,
	GW_CLOUD_CAMERA_STATUS_RES,
	GW_CLOUD_CAMERA_CONFIG_RES,
	GW_CLOUD_CAMERA_ALARM_RES,
	GW_CLOUD_SIGNALING_MQTT_RES,
	GW_CLOUD_MESSAGE_LENGTH_OUT_OF_RANGE_REP,
};

extern CppTime::Timer systemTimer;

#endif	  // __APP_H__
